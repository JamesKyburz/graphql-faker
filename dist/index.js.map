{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport 'core-js/shim';\n\nimport {\n  Source,\n  parse,\n  concatAST,\n  buildASTSchema,\n} from 'graphql';\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as express from 'express';\nimport * as graphqlHTTP from 'express-graphql';\nimport * as chalk from 'chalk';\n\nimport { fakeSchema } from './fake_schema';\nimport { proxyMiddleware } from './proxy';\nimport { existsSync } from './utils';\n\nimport * as opn from 'opn';\n\nconst cors = require('cors');\nconst pick = require('lodash/pick');\n\nconst DEFAULT_PORT = process.env.PORT || 9002;\nconst argv = require('yargs')\n  .usage('Usage: $0 [file]')\n  .alias('p', 'port')\n  .nargs('p', 1)\n  .describe('p', 'HTTP Port')\n  .default('p', DEFAULT_PORT)\n  .alias('e', 'extend')\n  .nargs('e', 1)\n  .describe('e', 'URL to existing GraphQL server to extend')\n  .alias('o', 'open')\n  .describe('o', 'Open page with IDL editor and GraphiQL in browser')\n  .alias('H', 'header')\n  .describe('H', 'Specify headers to the proxied server in cURL format,' +\n     'e.g.: \"Authorization: bearer XXXXXXXXX\"')\n  .nargs('H', 1)\n  .implies('header', 'extend')\n  .describe(\n    'forward-headers',\n    'Headers that should be forwarded to the proxied server'\n  )\n  .array('forward-headers')\n  .default('forward-headers', [])\n  .implies('forward-headers', 'extend')\n  .alias('co', 'cors-origin')\n  .nargs('co', 1)\n  .describe('co', 'CORS: Define Access-Control-Allow-Origin header')\n  .help('h')\n  .alias('h', 'help')\n  .epilog(`Examples:\n\n  # Mock GraphQL API based on example IDL and open interactive editor\n  $0 --open\n\n  # Extend real data from SWAPI with faked data based on extension IDL\n  $0 ./ext-swapi.grqphql --extend http://swapi.apis.guru/\n\n  # Extend real data from GitHub API with faked data based on extension IDL\n  $0 ./ext-gh.graphql --extend https://api.github.com/graphql \\\\\n  --header \"Authorization: bearer <TOKEN>\"`)\n  .argv\n\nconst log = console.log;\n\nlet headers = {};\nif (argv.header) {\n  const headerStrings = Array.isArray(argv.header) ? argv.header : [argv.header];\n  for (var str of headerStrings) {\n    const index = str.indexOf(':');\n    const name = str.substr(0, index);\n    const value = str.substr(index + 1).trim();\n    headers[name] = value;\n  }\n}\n\nconst forwardHeaderNames = (argv.forwardHeaders || []).map(\n  str => str.toLowerCase()\n);\n\nlet fileArg = argv._[0];\nlet fileName = fileArg || (argv.extend ?\n  './schema_extension.faker.graphql' :\n  './schema.faker.graphql');\n\nconst fakeDefinitionAST = readAST(path.join(__dirname, 'fake_definition.graphql'));\nconst corsOptions = {}\n\nif (argv.co) {\n  corsOptions['origin'] =  argv.co\n  corsOptions['credentials'] =  true\n}\n\nlet userIDL;\nif (existsSync(fileName)) {\n  userIDL = readIDL(fileName);\n} else {\n  // different default IDLs for extend and non-extend modes\n  let defaultFileName = argv.e ? 'default-extend.graphql' : 'default-schema.graphql';\n  userIDL = readIDL(path.join(__dirname, defaultFileName));\n}\n\nconst bodyParser = require('body-parser');\n\nfunction readIDL(filepath) {\n  return new Source(\n    fs.readFileSync(filepath, 'utf-8'),\n    filepath\n  );\n}\n\nfunction readAST(filepath) {\n  return parse(readIDL(filepath));\n}\n\nfunction saveIDL(idl) {\n  fs.writeFileSync(fileName, idl);\n  log(`${chalk.green('✚')} schema saved to ${chalk.magenta(fileName)} on ${(new Date()).toLocaleString()}`);\n  return new Source(idl, fileName);\n}\n\nif (argv.e) {\n  // run in proxy mode\n  const url = argv.e;\n  proxyMiddleware(url, headers)\n    .then(([schemaIDL, cb]) => {\n      schemaIDL = new Source(schemaIDL, `Inrospection from \"${url}\"`);\n      runServer(schemaIDL, userIDL, cb)\n    })\n    .catch(error => {\n      log(chalk.red(error.stack));\n      process.exit(1);\n    });\n} else {\n  runServer(userIDL, null, schema => {\n    fakeSchema(schema)\n    return {schema};\n  });\n}\n\nfunction buildServerSchema(idl) {\n  var ast = concatAST([parse(idl), fakeDefinitionAST]);\n  return buildASTSchema(ast);\n}\n\nfunction runServer(schemaIDL: Source, extensionIDL: Source, optionsCB) {\n  const app = express();\n\n  if (extensionIDL) {\n    const schema = buildServerSchema(schemaIDL);\n    extensionIDL.body = extensionIDL.body.replace('<RootTypeName>', schema.getQueryType().name);\n  }\n  app.options('/graphql', cors(corsOptions))\n  app.use('/graphql', cors(corsOptions), graphqlHTTP(req => {\n    const schema = buildServerSchema(schemaIDL);\n    const forwardHeaders = pick(req.headers, forwardHeaderNames);\n    return {\n      ...optionsCB(schema, extensionIDL, forwardHeaders),\n      graphiql: true,\n    };\n  }));\n\n  app.get('/user-idl', (_, res) => {\n    res.status(200).json({\n      schemaIDL: schemaIDL.body,\n      extensionIDL: extensionIDL && extensionIDL.body,\n    });\n  });\n\n  app.use('/user-idl', bodyParser.text());\n\n  app.post('/user-idl', (req, res) => {\n    try {\n      if (extensionIDL === null)\n        schemaIDL = saveIDL(req.body);\n      else\n        extensionIDL = saveIDL(req.body);\n\n      res.status(200).send('ok');\n    } catch(err) {\n      res.status(500).send(err.message)\n    }\n  });\n\n  app.use('/editor', express.static(path.join(__dirname, 'editor')));\n\n  app.listen(argv.port);\n\n  log(`\\n${chalk.green('✔')} Your GraphQL Fake API is ready to use 🚀\n  Here are your links:\n\n  ${chalk.blue('❯')} Interactive Editor:\\t http://localhost:${argv.port}/editor\n  ${chalk.blue('❯')} GraphQL API:\\t http://localhost:${argv.port}/graphql\n\n  `);\n\n  if (!fileArg) {\n    log(chalk.yellow(`Default file ${chalk.magenta(fileName)} is used. ` +\n    `Specify [file] parameter to change.`));\n  }\n\n  if (argv.open) {\n    setTimeout(() => opn(`http://localhost:${argv.port}/editor`), 500);\n  }\n}\n"]}