{"version":3,"file":"fake_schema.js","sourceRoot":"","sources":["../src/fake_schema.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,mCAaiB;AAEjB,+BAKgB;AAqBhB,IAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,iBAAU,CAAC,CAAC;AAE7C,mBAAmB,GAAG;IACpB,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;QACjB,KAAK,cAAI,CAAC,IAAI;YACZ,MAAM,CAAC,IAAI,CAAC;QACd,KAAK,cAAI,CAAC,GAAG;YACX,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACjC,KAAK,cAAI,CAAC,KAAK;YACb,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC/B,KAAK,cAAI,CAAC,MAAM,CAAC;QACjB,KAAK,cAAI,CAAC,OAAO;YACf,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC;QACnB,KAAK,cAAI,CAAC,IAAI;YACZ,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACnC,KAAK,cAAI,CAAC,MAAM;YACd,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,UAAC,MAAM,EAAE,EAAa;oBAAZ,cAAI,EAAE,gBAAK;gBAC5C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;gBACtC,MAAM,CAAC,MAAM,CAAC;YAChB,CAAC,EAAE,EAAE,CAAC,CAAC;IACX,CAAC;AACH,CAAC;AAED,oBAA2B,MAAM;IAC/B,IAAM,gBAAgB,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC;IAC/D,IAAM,QAAQ,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC,gBAAgB,CAAC,CAAC;IACvD,QAAQ,CAAC,YAAY,GAAG,SAAS,CAAC;IAElC,GAAG,CAAC,CAAa,UAAkC,EAAlC,KAAA,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,EAAlC,cAAkC,EAAlC,IAAkC;QAA9C,IAAI,IAAI,SAAA;QACX,EAAE,CAAC,CAAC,IAAI,YAAY,2BAAiB,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3E,IAAI,CAAC,SAAS,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,EAAL,CAAK,CAAC,CAAC;YAClC,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;YAC9B,IAAI,CAAC,UAAU,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;QAC7B,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,YAAY,2BAAiB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACnE,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAC1B,EAAE,CAAC,CAAC,wBAAc,CAAC,IAAI,CAAC,CAAC;YACvB,IAAI,CAAC,WAAW,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,UAAU,EAAd,CAAc,CAAC,CAAC;KAC9C;IAAA,CAAC;IAEF,2BAA2B,UAA4B;QACrD,IAAM,UAAU,GAAG,CAAC,UAAU,CAAC,IAAI,KAAK,gBAAgB,CAAC,CAAC;QAE1D,GAAG,CAAC,CAAc,UAAqC,EAArC,KAAA,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,EAArC,cAAqC,EAArC,IAAqC;YAAlD,IAAI,KAAK,SAAA;YACZ,EAAE,CAAC,CAAC,UAAU,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;gBACvC,KAAK,CAAC,OAAO,GAAG,wBAAwB,EAAE,CAAC;YAC7C,IAAI;gBACF,KAAK,CAAC,OAAO,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;SAC3C;IACH,CAAC;IAED,yBAAyB,KAAK;QAC5B,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QACxB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC;YAChD,MAAM,CAAC,KAAK,CAAC;QAEf,IAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAC/B,6CAA6C;QAC7C,MAAM,CAAC,CACL,SAAS,YAAY,wBAAc;YACnC,SAAS,CAAC,MAAM,YAAY,gCAAsB;YAClD,KAAK,CAAC,IAAI,YAAY,2BAAiB,CACxC,CAAC;IACJ,CAAC;IAED,0BAA0B,KAAK;QAC7B,IAAM,YAAY,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACpD,MAAM,CAAC,UAAC,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI;YAC1B,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACpD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC5B,CAAC;YAED,IAAM,KAAK,GAAG,wBAAwB,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1D,MAAM,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,GAAG,KAAK,GAAG,YAAY,EAAE,CAAC;QACxD,CAAC,CAAA;IACH,CAAC;IAED;QACE,MAAM,CAAC,UAAC,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI;YAC5B,IAAM,KAAK,GAAG,wBAAwB,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1D,EAAE,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC;gBACzB,MAAM,CAAC,KAAK,CAAC;YACf,MAAM,cAAK,IAAI,CAAC,OAAO,CAAC,EAAK,KAAK,EAAE;QACtC,CAAC,CAAA;IACH,CAAC;IAED,oDAAoD;IACpD,kCAAkC,MAAM,EAAE,IAAI;QAC5C,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,IAAK,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC;IAED,qBAAqB,IAAsB,EAAE,KAAK;QAChD,EAAE,CAAC,CAAC,IAAI,YAAY,wBAAc,CAAC;YACjC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACzC,EAAE,CAAC,CAAC,IAAI,YAAY,qBAAW,CAAC;YAC9B,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;QAExD,EAAE,CAAC,CAAC,wBAAc,CAAC,IAAI,CAAC,CAAC;YACvB,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QAEpC,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACpC,CAAC;IAGD,8BAA8B,IAAwB;QACpD,IAAM,aAAa,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QACpD,MAAM,CAAC,cAAM,OAAA,CAAC,EAAC,UAAU,EAAE,oBAAa,CAAC,aAAa,CAAC,EAAC,CAAC,EAA5C,CAA4C,CAAC;IAC5D,CAAC;AACH,CAAC;AArFD,gCAqFC;AAED,uBAAuB,IAAsB,EAAE,KAAK;IAClD,IAAM,eAAe,gBAChB,iBAAiB,CAAC,IAAI,CAAC,EACvB,iBAAiB,CAAC,KAAK,CAAC,CAC5B,CAAC;IACK,IAAA,2BAAI,EAAE,mCAAQ,CAAoB;IAGzC,EAAE,CAAC,CAAC,oBAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACrB,EAAE,CAAC,CAAC,QAAQ,CAAC;YACX,MAAM,CAAC,cAAM,OAAA,oBAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,EAA9B,CAA8B,CAAA;QAC7C,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACT,MAAM,CAAC,cAAM,OAAA,gBAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,EAA/C,CAA+C,CAAC;QAC/D,CAAC;QACD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,gCAAgC;QAChC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,cAAM,OAAA,cACR,oBAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,IACjC,QAAQ,EAAE,IAAI,IACd,EAHW,CAGX,CAAC;QACL,CAAC;QACD,MAAM,CAAC,cAAM,OAAA,CAAC,EAAE,CAAC,EAAJ,CAAI,CAAC;IACpB,CAAC;AACH,CAAC;AAED,uBAAuB,YAAY;IACjC,MAAM,CAAC;QAAC,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,yBAAO;;QACb,IAAI,MAAM,GAAG,mBAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChC,IAAM,MAAM,GAAG,EAAE,CAAC;QAElB,OAAO,MAAM,EAAE,KAAK,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC,YAAY,eAAI,IAAI,EAAE,CAAC;QACrC,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC,CAAA;AACH,CAAC;AAED,2BAA2B,MAAW;IACpC,IAAM,UAAU,GAAG,MAAM,CAAC,mBAAmB,CAA4B,CAAC;IAC1E,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;QACd,MAAM,CAAC,EAAE,CAAC;IAEZ,IAAM,MAAM,GAAG,EAAmB,CAAC;IACnC,EAAE,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC/B,MAAM,CAAC,IAAI,GAAG,UAAU,CAAC,gBAAgB,CAAC,MAAM,CAAa,CAAC;IAChE,EAAE,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QACnC,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC,gBAAgB,CAAC,UAAU,CAAiB,CAAC;IAC5E,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC;AAED,yBAAyB,IAAoB;IAC3C,EAAE,CAAC,CAAC,IAAI,YAAY,yBAAe,CAAC,CAAC,CAAC;QACpC,IAAM,QAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,CAAC,CAAC;QAClD,MAAM,CAAC,cAAM,OAAA,oBAAa,CAAC,QAAM,CAAC,EAArB,CAAqB,CAAC;IACrC,CAAC;IAED,IAAM,SAAS,GAAG,iBAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxC,EAAE,CAAC,CAAC,SAAS,CAAC;QACZ,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;IACvD,IAAI;QACF,MAAM,CAAC,cAAM,OAAA,MAAI,IAAI,CAAC,IAAI,MAAG,EAAhB,CAAgB,CAAC;AAClC,CAAC","sourcesContent":["import {\n  Kind,\n  isLeafType,\n  isAbstractType,\n  GraphQLObjectType,\n  GraphQLScalarType,\n  GraphQLAbstractType,\n  GraphQLOutputType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLEnumType,\n  GraphQLLeafType,\n} from 'graphql';\n\nimport {\n  getRandomInt,\n  getRandomItem,\n  typeFakers,\n  fakeValue,\n} from './fake';\n\ninterface GraphQLAppliedDiretives {\n  isApplied(directiveName: string): boolean;\n  getAppliedDirectives(): Array<string>;\n  getDirectiveArgs(directiveName: string): { [argName: string]: any };\n}\n\ntype FakeArgs = {\n  type:string\n  options: {[key:string]: any}\n  locale: string\n};\ntype ExamplesArgs = {\n  values:[any]\n};\ntype DirectiveArgs = {\n  fake?: FakeArgs\n  examples?: ExamplesArgs\n};\n\nconst stdTypeNames = Object.keys(typeFakers);\n\nfunction astToJSON(ast) {\n  switch (ast.kind) {\n    case Kind.NULL:\n      return null;\n    case Kind.INT:\n      return parseInt(ast.value, 10);\n    case Kind.FLOAT:\n      return parseFloat(ast.value);\n    case Kind.STRING:\n    case Kind.BOOLEAN:\n      return ast.value;\n    case Kind.LIST:\n      return ast.values.map(astToJSON);\n    case Kind.OBJECT:\n      return ast.fields.reduce((object, {name, value}) => {\n        object[name.value] = astToJSON(value);\n        return object;\n      }, {});\n  }\n}\n\nexport function fakeSchema(schema) {\n  const mutationTypeName = (schema.getMutationType() || {}).name;\n  const jsonType = schema.getTypeMap()['examples__JSON'];\n  jsonType.parseLiteral = astToJSON;\n\n  for (let type of Object.values(schema.getTypeMap())) {\n    if (type instanceof GraphQLScalarType && !stdTypeNames.includes(type.name)) {\n      type.serialize = (value => value);\n      type.parseLiteral = astToJSON;\n      type.parseValue = (x => x);\n    }\n    if (type instanceof GraphQLObjectType && !type.name.startsWith('__'))\n      addFakeProperties(type);\n    if (isAbstractType(type))\n      type.resolveType = (obj => obj.__typename);\n  };\n\n  function addFakeProperties(objectType:GraphQLObjectType) {\n    const isMutation = (objectType.name === mutationTypeName);\n\n    for (let field of Object.values(objectType.getFields())) {\n      if (isMutation && isRelayMutation(field))\n        field.resolve = getRelayMutationResolver();\n      else\n        field.resolve = getFieldResolver(field);\n    }\n  }\n\n  function isRelayMutation(field) {\n    const args = field.args;\n    if (args.length !== 1 || args[0].name !== 'input')\n      return false;\n\n    const inputType = args[0].type;\n    // TODO: check presence of 'clientMutationId'\n    return (\n      inputType instanceof GraphQLNonNull &&\n      inputType.ofType instanceof GraphQLInputObjectType &&\n      field.type instanceof GraphQLObjectType\n    );\n  }\n\n  function getFieldResolver(field) {\n    const fakeResolver = getResolver(field.type, field);\n    return (source, _0, _1, info) => {\n      if (source && source.$example && source[field.name]) {\n        return source[field.name];\n      }\n\n      const value = getCurrentSourceProperty(source, info.path);\n      return (value !== undefined) ? value : fakeResolver();\n    }\n  }\n\n  function getRelayMutationResolver() {\n    return (source, args, _1, info) => {\n      const value = getCurrentSourceProperty(source, info.path);\n      if (value instanceof Error)\n        return value;\n      return {...args['input'], ...value};\n    }\n  }\n\n  // get value or Error instance injected by the proxy\n  function getCurrentSourceProperty(source, path) {\n    return source && source[path!.key];\n  }\n\n  function getResolver(type:GraphQLOutputType, field) {\n    if (type instanceof GraphQLNonNull)\n      return getResolver(type.ofType, field);\n    if (type instanceof GraphQLList)\n      return arrayResolver(getResolver(type.ofType, field));\n\n    if (isAbstractType(type))\n      return abstractTypeResolver(type);\n\n    return fieldResolver(type, field);\n  }\n\n\n  function abstractTypeResolver(type:GraphQLAbstractType) {\n    const possibleTypes = schema.getPossibleTypes(type);\n    return () => ({__typename: getRandomItem(possibleTypes)});\n  }\n}\n\nfunction fieldResolver(type:GraphQLOutputType, field) {\n  const directiveToArgs = {\n    ...getFakeDirectives(type),\n    ...getFakeDirectives(field),\n  };\n  const {fake, examples} = directiveToArgs;\n\n\n  if (isLeafType(type)) {\n    if (examples)\n      return () => getRandomItem(examples.values)\n    if (fake) {\n      return () => fakeValue(fake.type, fake.options, fake.locale);\n    }\n    return getLeafResolver(type);\n  } else {\n    // TODO: error on fake directive\n    if (examples) {\n      return () => ({\n        ...getRandomItem(examples.values),\n        $example: true,\n      });\n    }\n    return () => ({});\n  }\n}\n\nfunction arrayResolver(itemResolver) {\n  return (...args) => {\n    let length = getRandomInt(2, 4);\n    const result = [];\n\n    while (length-- !== 0)\n      result.push(itemResolver(...args));\n    return result;\n  }\n}\n\nfunction getFakeDirectives(object: any) {\n  const directives = object['appliedDirectives'] as GraphQLAppliedDiretives;\n  if (!directives)\n    return {};\n\n  const result = {} as DirectiveArgs;\n  if (directives.isApplied('fake'))\n    result.fake = directives.getDirectiveArgs('fake') as FakeArgs;\n  if (directives.isApplied('examples'))\n    result.examples = directives.getDirectiveArgs('examples') as ExamplesArgs;\n  return result;\n}\n\nfunction getLeafResolver(type:GraphQLLeafType) {\n  if (type instanceof GraphQLEnumType) {\n    const values = type.getValues().map(x => x.value);\n    return () => getRandomItem(values);\n  }\n\n  const typeFaker = typeFakers[type.name];\n  if (typeFaker)\n    return typeFaker.generator(typeFaker.defaultOptions);\n  else\n    return () => `<${type.name}>`;\n}\n"]}